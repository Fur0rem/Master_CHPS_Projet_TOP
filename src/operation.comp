#version 450
#extension GL_ARB_gpu_shader_fp64 : enable


layout(binding = 0) uniform nBlock {
    uint n_size;
};

layout(binding = 1) uniform mBlock {
    uint m_size;
};

layout(binding = 2) uniform kBlock {
    uint k_size;
};

// Of size m * k, row-major
layout(binding = 3) buffer ABlock {
    double A_data[];
};

// Of size k * n, col-major
layout(binding = 4) buffer BBlock {
    double B_data[];
};

// Of size m * n, row-major
layout(binding = 5) buffer CBlock {
    double C_data[];
};

layout(binding = 6) uniform alphaBlock {
    double alpha_term;
};

layout(binding = 7) uniform betaBlock {
    double beta_term;
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint i = gl_GlobalInvocationID.x;
    uint start_i = i * ((m_size + 1023) / 1024);
    uint end_i = (i + 1) * ((m_size + 1023) / 1024);

    for (uint ix = start_i; ix < end_i && ix < m_size; ++ix) {
        for (uint j = 0; j < n_size; ++j) {
            double acc = 0.0;
            for (uint k = 0; k < k_size; ++k) {
                // Access A (row-major): A[ix * k_size + k]
                // Access B (column-major): B[k + j * k_size]
                acc += alpha_term * A_data[ix * k_size + k] * B_data[k + j * k_size];
            }
            // Access C (row-major): C[ix * n_size + j]
            C_data[ix * n_size + j] = (beta_term + acc) * C_data[ix * n_size + j];
        }
    }
}